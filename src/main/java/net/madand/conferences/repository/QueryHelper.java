package net.madand.conferences.repository;

import net.madand.conferences.entity.IDable;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * This utility class provides polymorphic method for performing typical SQL queries and populating entities with the
 * results. This allows to reduce the amount of boilerplate code in the repository classes.
 */
class QueryHelper {
    private QueryHelper() {}

    /**
     * Insert the given entity into the DB, then set entity ID field to the value generated by the DB.
     *
     * @param conn the connection.
     * @param sql the SQL INSERT query .
     * @param entity the entity we are to insert.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @param <T> the entity type.
     * @throws SQLException
     */
    public static <T extends IDable> void insert(Connection conn, String sql, T entity, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            paramsSetter.setStatementParameters(stmt);

            if (stmt.executeUpdate() == 1) {
                // Try for sonar, even though Statement will close the Result Set anyway.
                try (ResultSet rs = stmt.getGeneratedKeys()) {
                    if (rs.first()) {
                        entity.setId(rs.getInt(1));
                    }
                }
            }
        }
    }

    /**
     * Return a list of all the entities found in the database by the given SELECT query.
     *
     * @param conn the connection.
     * @param sql the SQL SELECT query .
     * @param entityCreator a lambda that creates entity instance form each result set row.
     * @param <T> the entity type.
     * @return the list of found entities.
     * @throws SQLException
     */
    public static <T> List<T> findAll(Connection conn, String sql, EntityFromResultSetCreator<T> entityCreator) throws SQLException {
        return findAll(conn, sql, stmt -> {}, entityCreator);
    }

    /**
     * Return a list of all the entities found in the database by the given SELECT query.
     *
     * @param conn the connection.
     * @param sql the SQL SELECT query .
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @param entityCreator a lambda that creates entity instance form each result set row.
     * @param <T> the entity type.
     * @return the list of found entities.
     * @throws SQLException
     */
    public static <T> List<T> findAll(Connection conn, String sql, StatementParametersSetter paramsSetter,
                                      EntityFromResultSetCreator<T> entityCreator) throws SQLException {
        List<T> list = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                list.add(entityCreator.createEntityFromResultSet(rs));
            }
        }

        return list;
    }

    /**
     * @param conn the connection.
     * @param sql the SQL SELECT query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @param entityCreator a lambda that creates entity instance form each result set row.
     * @param <T> the entity type.
     * @return the found entity or null.
     * @throws SQLException
     */
    public static <T> T findOne(Connection conn, String sql, StatementParametersSetter paramsSetter,
                                EntityFromResultSetCreator<T> entityCreator) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return entityCreator.createEntityFromResultSet(rs);
            }
        }

        return null;
    }

    /**
     * Delete the database row corresponding to the given entity.
     *
     * @param conn the connection.
     * @param sql the SQL DELETE query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @throws SQLException
     */
    public static void delete(Connection conn, String sql, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            stmt.executeUpdate();
        }
    }

    /**
     * Update the database row corresponding to the given entity.
     *
     * @param conn the connection.
     * @param sql the SQL UPDATE query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @throws SQLException
     */
    public static void update(Connection conn, String sql, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            stmt.executeUpdate();
        }
    }

    @FunctionalInterface
    public interface StatementParametersSetter {
        void setStatementParameters(PreparedStatement stmt) throws SQLException;
    }

    @FunctionalInterface
    public interface EntityFromResultSetCreator<E> {
        E createEntityFromResultSet(ResultSet rs) throws SQLException;
    }
}
