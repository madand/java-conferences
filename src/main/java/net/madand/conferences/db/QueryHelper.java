package net.madand.conferences.db;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * This utility class provides polymorphic method for performing typical SQL queries and populating entities with the
 * results. This allows to reduce the amount of boilerplate code in the repository classes.
 */
public class QueryHelper {
    private QueryHelper() {}

    /**
     * Return a list of all the entities found in the database by the given SELECT query.
     *
     * @param conn the connection.
     * @param sql the SQL SELECT query .
     * @param entityCreator a lambda that creates entity instance form each result set row.
     * @param <T> the entity type.
     * @return the list of found entities.
     * @throws SQLException
     */
    public static <T> List<T> findAll(Connection conn, String sql, Mapper<T> entityCreator) throws SQLException {
        return findAll(conn, sql, stmt -> {}, entityCreator);
    }

    /**
     * Return a list of all the entities found in the database by the given SELECT query.
     *
     * @param conn the connection.
     * @param sql the SQL SELECT query .
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @param mapper a mapper that creates entity instances form result set rows.
     * @param <T> the entity type.
     * @return the list of found entities.
     * @throws SQLException
     */
    public static <T> List<T> findAll(Connection conn, String sql, StatementParametersSetter paramsSetter,
                                      Mapper<T> mapper) throws SQLException {
        List<T> list = new ArrayList<>();

        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                list.add(mapper.mapRow(rs));
            }
        }

        return list;
    }

    /**
     * @param conn the connection.
     * @param sql the SQL SELECT query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @param mapper a mapper that creates entity instances form result set rows.
     * @param <T> the entity type.
     * @return the found entity or null.
     * @throws SQLException
     */
    public static <T> T findOne(Connection conn, String sql, StatementParametersSetter paramsSetter,
                                Mapper<T> mapper) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return mapper.mapRow(rs);
            }
        }

        return null;
    }

    /**
     * Insert the given entity into the DB, then set entity ID field to the value generated by the DB.
     *
     * @param conn the connection.
     * @param sql the SQL INSERT query .
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @return the generated integer primary key, if any.
     * @throws SQLException
     */
    public static <T> Optional<Integer> insert(Connection conn, String sql, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            paramsSetter.setStatementParameters(stmt);

            if (stmt.executeUpdate() == 1) {
                ResultSet rs = stmt.getGeneratedKeys();
                if (rs.next()) {
                    return Optional.of(rs.getInt(1));
                }
            }
        }
        return Optional.empty();
    }

    /**
     * Delete the database row corresponding to the given entity.
     *
     * @param conn the connection.
     * @param sql the SQL DELETE query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @throws SQLException
     */
    public static void delete(Connection conn, String sql, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            stmt.executeUpdate();
        }
    }

    /**
     * Update the database row corresponding to the given entity.
     *
     * @param conn the connection.
     * @param sql the SQL UPDATE query.
     * @param paramsSetter a lambda that will set query parameters to actual values.
     * @throws SQLException
     */
    public static void update(Connection conn, String sql, StatementParametersSetter paramsSetter) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            paramsSetter.setStatementParameters(stmt);
            stmt.executeUpdate();
        }
    }

}
